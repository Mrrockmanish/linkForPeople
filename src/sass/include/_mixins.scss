@mixin default-transition() {
	transition: all 0.3s ease;
}

@mixin opacity-transition() {
	transition: opacity 0.3s ease;
}

@mixin grayscale() {
	filter: grayscale(100%);
}

@mixin link-hvr($color:#ffffff, $height:2px) {
	display: inline-block;

	&:hover, &:active, &:focus {
		text-decoration: none;
	}

	&:after {
		@include default-transition();

		display: block;
		content: "";
		height: $height;
		width: 0;
		background-color: $color;
	}

	&:hover:after {
		width: 100%;
	}
}

@mixin btn($color: #949494, $color-border: #949494, $color-bg: transparent, $hvr-color: #ffffff, $hvr-color-border: #949494, $hvr-color-bg: #949494) {
	@include default-transition();

	border-radius: 5px;
	border: 1px solid;
	cursor: pointer;
	text-decoration: none;
	padding: 8px 18px;
	font: {
		size: 14px;
	}

	&, &:focus, &:active {
		/** Colors **/
		color: $color !important;
		border-color: $color-border !important;
		background-color: $color-bg !important;

		outline: none;
	}

	&:hover {
		text-decoration: none;

		/** Hover colors **/
		color: $hvr-color !important;
		border-color: $hvr-color-border !important;
		background-color: $hvr-color-bg !important;
	}
}

@mixin form-group_flex($align: center ) {
	display: flex;
	align-items: $align;
	margin-bottom: 30px;
	& > * {
		&:first-child {
			flex: 0 0 170px;
			margin-right: 10px;
			font-size: 15px;
			font-weight: 500;
			line-height: 1.13;
		}
		&:last-child {
			flex: 1 1 auto;
		}
	}
	@media (max-width: 768px) {
		flex-direction: column;
		margin-bottom: 15px;
		align-items: flex-start;
		& > * {
			&:first-child {
				flex: 0;
				margin-right: 0;
				font-size: 14px;
				font-weight: 500;
				line-height: normal;
			}
			&:last-child {
				flex: 1 1 auto;
			}
		}
	}
}

@mixin placeholder {
	&::-webkit-input-placeholder {
		@content;
	}
	&:-moz-placeholder {
		@content;
	}
	&::-moz-placeholder {
		@content;
	}
	&:-ms-input-placeholder {
		@content;
	}
}

@mixin text-overflow($line:3) {
	overflow: hidden;
	text-overflow: ellipsis;
	display: -webkit-box;
	-webkit-line-clamp: $line;
	-webkit-box-orient: vertical;
}

$baseFontSize: 14; // Based on HTML reset html { font-size: 62.5%; }

@function parseInt($n) {
	@return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
	$px: ();
	$rem: ();

	$root: $baseFontSize;

	@each $value in $values {
		@if $value == 0 or $value == auto {
			$px: append($px, $value);
			$rem: append($rem, $value);
		} @else if type-of($value) == number {
			$unit: unit($value);
			$val: parseInt($value);

			@if $unit == "px" {
				$px: append($px, $value);
				$rem: append($rem, ($val / $root + rem));
			}

			@if $unit == "rem" {
				$px: append($px, ($val * $root + px));
				$rem: append($rem, $value);
			}
		} @else {
			$px: append($px, $value);
			$rem: append($rem, $value);
		}
	}

	@if $px == $rem {
		#{$property}: $px;
	} @else {
		#{$property}: $px;
		#{$property}: $rem;
	}
}

@function rem($value) {
	$root: $baseFontSize;
	$val: parseInt($value);
	$return: ();

	@if unit($value) == "px" {
		$return: append($return, ($val / $root + rem));
	} @else {
		$return: append($return, ($val * $root + px));
	}

	@return $return;
}